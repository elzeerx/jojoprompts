import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Sparkles, Plus, X } from "lucide-react";
import { useSmartSuggestions } from "../hooks/useSmartSuggestions";
import { AutoGenerateButton } from "./AutoGenerateButton";

interface SmartInputFieldsProps {
  metadata: any;
  onMetadataChange: (metadata: any) => void;
  promptText: string;
}

export function SmartInputFields({ metadata, onMetadataChange, promptText }: SmartInputFieldsProps) {
  const { suggestions, loading } = useSmartSuggestions(promptText, metadata?.category || 'ChatGPT');
  const [newTag, setNewTag] = useState("");
  const [showAllTags, setShowAllTags] = useState(false);
  const [showAllStyles, setShowAllStyles] = useState(false);

  const currentTags = metadata?.tags || [];
  const currentStyle = metadata?.style || "";

  const addTag = (tag: string) => {
    if (!currentTags.includes(tag)) {
      onMetadataChange({
        ...metadata,
        tags: [...currentTags, tag]
      });
    }
  };

  const removeTag = (tagToRemove: string) => {
    onMetadataChange({
      ...metadata,
      tags: currentTags.filter((tag: string) => tag !== tagToRemove)
    });
  };

  const addCustomTag = () => {
    if (newTag.trim() && !currentTags.includes(newTag.trim())) {
      addTag(newTag.trim());
      setNewTag("");
    }
  };

  const setStyle = (style: string) => {
    onMetadataChange({
      ...metadata,
      style
    });
  };

  const handleAutoGenerated = (generatedMetadata: { style: string; tags: string[] }) => {
    onMetadataChange({
      ...metadata, // Keep all existing metadata
      style: generatedMetadata.style || currentStyle,
      tags: [...new Set([...currentTags, ...generatedMetadata.tags])] // Merge existing tags with new ones
    });
  };

  return (
    <div className="space-y-6 bg-gradient-to-br from-blue-50 to-purple-50 p-6 rounded-xl border border-blue-200">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-2">
          <Sparkles className="h-5 w-5 text-blue-600" />
          <h3 className="text-lg font-semibold text-blue-900">Smart Suggestions</h3>
          {loading && <span className="text-xs text-blue-600">Loading suggestions...</span>}
        </div>
        <AutoGenerateButton
          promptText={promptText}
          onMetadataGenerated={handleAutoGenerated}
        />
      </div>

      {/* Tags Section */}
      <div className="space-y-3">
        <Label className="text-sm font-medium text-gray-700">Tags</Label>
        
        {/* Current Tags */}
        {currentTags.length > 0 && (
          <div className="flex flex-wrap gap-2 mb-3">
            {currentTags.map((tag: string, index: number) => (
              <Badge key={index} variant="secondary" className="bg-blue-100 text-blue-800 hover:bg-blue-200">
                {tag}
                <button
                  type="button"
                  onClick={() => removeTag(tag)}
                  className="ml-1 hover:text-red-600"
                >
                  <X className="h-3 w-3" />
                </button>
              </Badge>
            ))}
          </div>
        )}

        {/* Suggested Tags */}
        <div className="space-y-2">
          <div className="text-xs text-gray-600 font-medium">Suggested tags:</div>
          <div className="flex flex-wrap gap-2">
            {suggestions.tags.slice(0, showAllTags ? undefined : 6).map((tag, index) => (
              <Button
                key={index}
                type="button"
                variant="outline"
                size="sm"
                onClick={() => addTag(tag)}
                disabled={currentTags.includes(tag)}
                className="text-xs h-7 px-2 hover:bg-blue-100 hover:border-blue-300 disabled:opacity-50"
              >
                <Plus className="h-3 w-3 mr-1" />
                {tag}
              </Button>
            ))}
          </div>
          {suggestions.tags.length > 6 && (
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => setShowAllTags(!showAllTags)}
              className="text-xs text-blue-600 hover:text-blue-800"
            >
              {showAllTags ? 'Show less' : `Show ${suggestions.tags.length - 6} more`}
            </Button>
          )}
        </div>

        {/* Add Custom Tag */}
        <div className="flex gap-2">
          <Input
            type="text"
            placeholder="Add custom tag..."
            value={newTag}
            onChange={(e) => setNewTag(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && addCustomTag()}
            className="text-sm"
          />
          <Button
            type="button"
            onClick={addCustomTag}
            size="sm"
            variant="outline"
            disabled={!newTag.trim()}
          >
            Add
          </Button>
        </div>
      </div>

      {/* Style Section */}
      <div className="space-y-3">
        <Label className="text-sm font-medium text-gray-700">Style</Label>
        <Input
          type="text"
          placeholder="Enter style..."
          value={currentStyle}
          onChange={(e) => setStyle(e.target.value)}
          className="mb-2"
        />
        <div className="space-y-2">
          <div className="text-xs text-gray-600 font-medium">Popular styles:</div>
          <div className="flex flex-wrap gap-2">
            {suggestions.styles.slice(0, showAllStyles ? undefined : 4).map((style, index) => (
              <Button
                key={index}
                type="button"
                variant="outline"
                size="sm"
                onClick={() => setStyle(style)}
                className="text-xs h-7 px-2 hover:bg-purple-100 hover:border-purple-300"
              >
                {style}
              </Button>
            ))}
          </div>
          {suggestions.styles.length > 4 && (
            <Button
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => setShowAllStyles(!showAllStyles)}
              className="text-xs text-purple-600 hover:text-purple-800"
            >
              {showAllStyles ? 'Show less' : `Show ${suggestions.styles.length - 4} more`}
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}